/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlogPage = {
  _id: string;
  _type: "blog-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
};

export type AwardsPage = {
  _id: string;
  _type: "awards-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
};

export type ExperiencePage = {
  _id: string;
  _type: "experience-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
};

export type ProjectsPage = {
  _id: string;
  _type: "projects-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
};

export type HomePage = {
  _id: string;
  _type: "home-page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  content: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              language:
                | "javascript"
                | "jsx"
                | "typescript"
                | "tsx"
                | "go"
                | "html"
                | "css"
                | "php"
                | "java"
                | "ruby"
                | "csharp"
                | "python"
                | "sh"
                | "sql"
                | "mysql"
                | "groq"
                | "text"
                | "markdown"
                | "json"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
        >;
        style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  };
              _type: "internalLink";
              _key: string;
            }
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  skillProgrammingLanguage?: Array<{
    title: string;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "skillItem";
    _key: string;
  }>;
  skillWebDevelopment?: Array<{
    title: string;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "skillItem";
    _key: string;
  }>;
  skillDatabase?: Array<{
    title: string;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "skillItem";
    _key: string;
  }>;
  skillTool?: Array<{
    title: string;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "skillItem";
    _key: string;
  }>;
};

export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  title: string;
  slug: Slug;
  description: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  repositoryLinks?: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }>;
  deploymentLinks?: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }>;
  content: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              language:
                | "javascript"
                | "jsx"
                | "typescript"
                | "tsx"
                | "go"
                | "html"
                | "css"
                | "php"
                | "java"
                | "ruby"
                | "csharp"
                | "python"
                | "sh"
                | "sql"
                | "mysql"
                | "groq"
                | "text"
                | "markdown"
                | "json"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
        >;
        style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  };
              _type: "internalLink";
              _key: string;
            }
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type Experience = {
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  title: string;
  slug: Slug;
  description: string;
  company: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  repositoryLinks?: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }>;
  deploymentLinks?: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }>;
  content: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              language:
                | "javascript"
                | "jsx"
                | "typescript"
                | "tsx"
                | "go"
                | "html"
                | "css"
                | "php"
                | "java"
                | "ruby"
                | "csharp"
                | "python"
                | "sh"
                | "sql"
                | "mysql"
                | "groq"
                | "text"
                | "markdown"
                | "json"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
        >;
        style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  };
              _type: "internalLink";
              _key: string;
            }
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type Awards = {
  _id: string;
  _type: "awards";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  title: string;
  slug: Slug;
  description: string;
  issuer: string;
  date: string;
  content: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              language:
                | "javascript"
                | "jsx"
                | "typescript"
                | "tsx"
                | "go"
                | "html"
                | "css"
                | "php"
                | "java"
                | "ruby"
                | "csharp"
                | "python"
                | "sh"
                | "sql"
                | "mysql"
                | "groq"
                | "text"
                | "markdown"
                | "json"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
        >;
        style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  };
              _type: "internalLink";
              _key: string;
            }
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  title: string;
  slug: Slug;
  description: string;
  date: string;
  content: Array<
    | {
        children?: Array<
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              language:
                | "javascript"
                | "jsx"
                | "typescript"
                | "tsx"
                | "go"
                | "html"
                | "css"
                | "php"
                | "java"
                | "ruby"
                | "csharp"
                | "python"
                | "sh"
                | "sql"
                | "mysql"
                | "groq"
                | "text"
                | "markdown"
                | "json"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
        >;
        style?: "normal" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  };
              _type: "internalLink";
              _key: string;
            }
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
  >;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlogPage
  | AwardsPage
  | ExperiencePage
  | ProjectsPage
  | HomePage
  | Projects
  | Experience
  | Awards
  | Blog
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Code
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/query.ts
// Variable: homePageQuery
// Query: *[_type == "home-page"][0] {    _id,    title,    content,    "image": {      "url": image.asset->url,      "alt": image.alt,    },    skillProgrammingLanguage[]{      title,      "logo": logo.asset->url,    },    skillWebDevelopment[]{      title,      "logo": logo.asset->url,    },    skillDatabase[]{      title,      "logo": logo.asset->url,    },    skillTool[]{      title,      "logo": logo.asset->url,    }  }
export type HomePageQueryResult = {
  _id: string;
  title: string;
  content: Array<
    | ({
        _key: string;
      } & Code)
    | {
        children?: Array<
          | {
              language:
                | "csharp"
                | "css"
                | "go"
                | "groq"
                | "html"
                | "java"
                | "javascript"
                | "json"
                | "jsx"
                | "markdown"
                | "mysql"
                | "php"
                | "python"
                | "ruby"
                | "sh"
                | "sql"
                | "text"
                | "tsx"
                | "typescript"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
        >;
        style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  };
              _type: "internalLink";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
      }
  >;
  image: {
    url: string | null;
    alt: string;
  };
  skillProgrammingLanguage: Array<{
    title: string;
    logo: string | null;
  }> | null;
  skillWebDevelopment: Array<{
    title: string;
    logo: string | null;
  }> | null;
  skillDatabase: Array<{
    title: string;
    logo: string | null;
  }> | null;
  skillTool: Array<{
    title: string;
    logo: string | null;
  }> | null;
} | null;
// Variable: projectsPageQuery
// Query: *[_type == "projects-page"][0] {    _id,    title,    description,  }
export type ProjectsPageQueryResult = {
  _id: string;
  title: string;
  description: string;
} | null;
// Variable: allProjectsQuery
// Query: *[_type == "projects"] | order(dateRange.startDate desc) {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt,    },    title,    slug,    description,    dateRange,    repositoryLinks,    deploymentLinks,  }
export type AllProjectsQueryResult = Array<{
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  repositoryLinks: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }> | null;
  deploymentLinks: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }> | null;
}>;
// Variable: projectDetailQuery
// Query: *[_type == "projects" && slug.current == $slug][0] {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt,    },    title,    slug,    description,    dateRange,    repositoryLinks,    deploymentLinks,    content[]{      ...,      markDefs[]{        ...,        _type == "internalLink" => {          ...,          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,        },        _type == "externalLink" => {          ...,          "href": url,        },      },      _type == "image" => {        ...,        "url": asset->url,        "alt": alt,      }    },  }
export type ProjectDetailQueryResult = {
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  repositoryLinks: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }> | null;
  deploymentLinks: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }> | null;
  content: Array<
    | {
        children?: Array<
          | {
              language:
                | "csharp"
                | "css"
                | "go"
                | "groq"
                | "html"
                | "java"
                | "javascript"
                | "json"
                | "jsx"
                | "markdown"
                | "mysql"
                | "php"
                | "python"
                | "ruby"
                | "sh"
                | "sql"
                | "text"
                | "tsx"
                | "typescript"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
        >;
        style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
              href: string | null;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  };
              _type: "internalLink";
              _key: string;
              href: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
        markDefs: null;
        url: string | null;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
        markDefs: null;
      }
  >;
} | null;
// Variable: experiencePageQuery
// Query: *[_type == "experience-page"][0] {    _id,    title,    description,  }
export type ExperiencePageQueryResult = {
  _id: string;
  title: string;
  description: string;
} | null;
// Variable: allExperiencesQuery
// Query: *[_type == "experience"] | order(dateRange.startDate desc) {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt    },    title,    slug,    description,    dateRange,    company,    repositoryLinks,    deploymentLinks,  }
export type AllExperiencesQueryResult = Array<{
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  company: string;
  repositoryLinks: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }> | null;
  deploymentLinks: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }> | null;
}>;
// Variable: experienceDetailQuery
// Query: *[_type == "experience" && slug.current == $slug][0] {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt    },    title,    slug,    description,    dateRange,    company,    repositoryLinks,    deploymentLinks,    content[]{      ...,      markDefs[]{        ...,        _type == "internalLink" => {          ...,          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,        },        _type == "externalLink" => {          ...,          "href": url,        },      },      _type == "image" => {        ...,        "url": asset->url,        "alt": alt,      }    },  }
export type ExperienceDetailQueryResult = {
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  dateRange: {
    startDate: string;
    endDate?: string;
  };
  company: string;
  repositoryLinks: Array<{
    label: string;
    url: string;
    _type: "repositoryLink";
    _key: string;
  }> | null;
  deploymentLinks: Array<{
    label: string;
    url: string;
    _type: "deploymentLink";
    _key: string;
  }> | null;
  content: Array<
    | {
        children?: Array<
          | {
              language:
                | "csharp"
                | "css"
                | "go"
                | "groq"
                | "html"
                | "java"
                | "javascript"
                | "json"
                | "jsx"
                | "markdown"
                | "mysql"
                | "php"
                | "python"
                | "ruby"
                | "sh"
                | "sql"
                | "text"
                | "tsx"
                | "typescript"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
        >;
        style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
              href: string | null;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  };
              _type: "internalLink";
              _key: string;
              href: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
        markDefs: null;
        url: string | null;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
        markDefs: null;
      }
  >;
} | null;
// Variable: awardsPageQuery
// Query: *[_type == "awards-page"][0] {    _id,    title,    description,  }
export type AwardsPageQueryResult = {
  _id: string;
  title: string;
  description: string;
} | null;
// Variable: allAwardsQuery
// Query: *[_type == "awards"] | order(date desc) {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt    },    title,    slug,    description,    issuer,    date,  }
export type AllAwardsQueryResult = Array<{
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  issuer: string;
  date: string;
}>;
// Variable: awardDetailQuery
// Query: *[_type == "awards" && slug.current == $slug][0] {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt    },    title,    slug,    description,    issuer,    date,    content[]{      ...,      markDefs[]{        ...,        _type == "internalLink" => {          ...,          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,        },        _type == "externalLink" => {          ...,          "href": url,        },      },      _type == "image" => {        ...,        "url": asset->url,        "alt": alt,      }    },  }
export type AwardDetailQueryResult = {
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  issuer: string;
  date: string;
  content: Array<
    | {
        children?: Array<
          | {
              language:
                | "csharp"
                | "css"
                | "go"
                | "groq"
                | "html"
                | "java"
                | "javascript"
                | "json"
                | "jsx"
                | "markdown"
                | "mysql"
                | "php"
                | "python"
                | "ruby"
                | "sh"
                | "sql"
                | "text"
                | "tsx"
                | "typescript"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
        >;
        style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
              href: string | null;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  };
              _type: "internalLink";
              _key: string;
              href: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
        markDefs: null;
        url: string | null;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
        markDefs: null;
      }
  >;
} | null;
// Variable: blogPageQuery
// Query: *[_type == "blog-page"][0] {    _id,    title,    description,  }
export type BlogPageQueryResult = {
  _id: string;
  title: string;
  description: string;
} | null;
// Variable: allBlogsQuery
// Query: *[_type == "blog"] | order(date desc) {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt,    },    title,    slug,    description,    date,  }
export type AllBlogsQueryResult = Array<{
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  date: string;
}>;
// Variable: blogDetailQuery
// Query: *[_type == "blog" && slug.current == $slug][0] {    _id,    "image": {      "url": image.asset->url,      "alt": image.alt,    },    title,    slug,    description,    date,    content[]{      ...,      markDefs[]{        ...,        _type == "internalLink" => {          ...,          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,        },        _type == "externalLink" => {          ...,          "href": url,        },      },      _type == "image" => {        ...,        "url": asset->url,        "alt": alt,      }    },  }
export type BlogDetailQueryResult = {
  _id: string;
  image: {
    url: string | null;
    alt: string;
  };
  title: string;
  slug: Slug;
  description: string;
  date: string;
  content: Array<
    | {
        children?: Array<
          | {
              language:
                | "csharp"
                | "css"
                | "go"
                | "groq"
                | "html"
                | "java"
                | "javascript"
                | "json"
                | "jsx"
                | "markdown"
                | "mysql"
                | "php"
                | "python"
                | "ruby"
                | "sh"
                | "sql"
                | "text"
                | "tsx"
                | "typescript"
                | "xml"
                | "yaml";
              code: string;
              _type: "customCode";
              _key: string;
            }
          | {
              body: string;
              _type: "latex";
              _key: string;
            }
          | {
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }
        >;
        style?: "blockquote" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet" | "number";
        markDefs: Array<
          | {
              url?: string;
              _type: "externalLink";
              _key: string;
              href: string | null;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "awards";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "blog";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "experience";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "projects";
                  };
              _type: "internalLink";
              _key: string;
              href: string;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        _key: string;
        _type: "code";
        language?: string;
        filename?: string;
        code?: string;
        highlightedLines?: Array<number>;
        markDefs: null;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt: string;
        caption: boolean;
        _type: "image";
        _key: string;
        markDefs: null;
        url: string | null;
      }
    | {
        body: string;
        _type: "latex";
        _key: string;
        markDefs: null;
      }
  >;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == "home-page"][0] {\n    _id,\n    title,\n    content,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt,\n    },\n    skillProgrammingLanguage[]{\n      title,\n      "logo": logo.asset->url,\n    },\n    skillWebDevelopment[]{\n      title,\n      "logo": logo.asset->url,\n    },\n    skillDatabase[]{\n      title,\n      "logo": logo.asset->url,\n    },\n    skillTool[]{\n      title,\n      "logo": logo.asset->url,\n    }\n  }\n': HomePageQueryResult;
    '\n  *[_type == "projects-page"][0] {\n    _id,\n    title,\n    description,\n  }\n': ProjectsPageQueryResult;
    '\n  *[_type == "projects"] | order(dateRange.startDate desc) {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt,\n    },\n    title,\n    slug,\n    description,\n    dateRange,\n    repositoryLinks,\n    deploymentLinks,\n  }\n': AllProjectsQueryResult;
    '\n  *[_type == "projects" && slug.current == $slug][0] {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt,\n    },\n    title,\n    slug,\n    description,\n    dateRange,\n    repositoryLinks,\n    deploymentLinks,\n    content[]{\n      ...,\n      markDefs[]{\n        ...,\n        _type == "internalLink" => {\n          ...,\n          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,\n        },\n        _type == "externalLink" => {\n          ...,\n          "href": url,\n        },\n      },\n      _type == "image" => {\n        ...,\n        "url": asset->url,\n        "alt": alt,\n      }\n    },\n  }\n': ProjectDetailQueryResult;
    '\n  *[_type == "experience-page"][0] {\n    _id,\n    title,\n    description,\n  }\n': ExperiencePageQueryResult;
    '\n  *[_type == "experience"] | order(dateRange.startDate desc) {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt\n    },\n    title,\n    slug,\n    description,\n    dateRange,\n    company,\n    repositoryLinks,\n    deploymentLinks,\n  }\n': AllExperiencesQueryResult;
    '\n  *[_type == "experience" && slug.current == $slug][0] {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt\n    },\n    title,\n    slug,\n    description,\n    dateRange,\n    company,\n    repositoryLinks,\n    deploymentLinks,\n    content[]{\n      ...,\n      markDefs[]{\n        ...,\n        _type == "internalLink" => {\n          ...,\n          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,\n        },\n        _type == "externalLink" => {\n          ...,\n          "href": url,\n        },\n      },\n      _type == "image" => {\n        ...,\n        "url": asset->url,\n        "alt": alt,\n      }\n    },\n  }\n': ExperienceDetailQueryResult;
    '\n  *[_type == "awards-page"][0] {\n    _id,\n    title,\n    description,\n  }\n': AwardsPageQueryResult;
    '\n  *[_type == "awards"] | order(date desc) {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt\n    },\n    title,\n    slug,\n    description,\n    issuer,\n    date,\n  }\n': AllAwardsQueryResult;
    '\n  *[_type == "awards" && slug.current == $slug][0] {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt\n    },\n    title,\n    slug,\n    description,\n    issuer,\n    date,\n    content[]{\n      ...,\n      markDefs[]{\n        ...,\n        _type == "internalLink" => {\n          ...,\n          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,\n        },\n        _type == "externalLink" => {\n          ...,\n          "href": url,\n        },\n      },\n      _type == "image" => {\n        ...,\n        "url": asset->url,\n        "alt": alt,\n      }\n    },\n  }\n': AwardDetailQueryResult;
    '\n  *[_type == "blog-page"][0] {\n    _id,\n    title,\n    description,\n  }\n': BlogPageQueryResult;
    '\n  *[_type == "blog"] | order(date desc) {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt,\n    },\n    title,\n    slug,\n    description,\n    date,\n  }\n': AllBlogsQueryResult;
    '\n  *[_type == "blog" && slug.current == $slug][0] {\n    _id,\n    "image": {\n      "url": image.asset->url,\n      "alt": image.alt,\n    },\n    title,\n    slug,\n    description,\n    date,\n    content[]{\n      ...,\n      markDefs[]{\n        ...,\n        _type == "internalLink" => {\n          ...,\n          "href": "/" + @.reference->_type + "/" + @.reference->slug.current,\n        },\n        _type == "externalLink" => {\n          ...,\n          "href": url,\n        },\n      },\n      _type == "image" => {\n        ...,\n        "url": asset->url,\n        "alt": alt,\n      }\n    },\n  }\n': BlogDetailQueryResult;
  }
}
