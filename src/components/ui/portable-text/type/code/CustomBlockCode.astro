---
import CopyIcon from "@/components/icons/CopyIcon.astro";
import Button from "@/components/ui/Button.astro";
import Code from "./Code.astro";
import { transformerMetaHighlight } from "@shikijs/transformers";

// Props
interface Props {
  language: string;
  code: string;
  filename?: string;
  highlightedLines: number[];
}
const { language, code, filename, highlightedLines } = Astro.props;
---

<custom-block-code data-language={language}>
  <div
    class="mb-5 flex flex-col overflow-hidden rounded-md border border-border text-sm lg:mb-6 lg:text-base"
  >
    <div
      class="flex h-12 flex-row items-center justify-between border-b border-border bg-[#282c34] pl-4 pr-2"
    >
      {/* Filename */}
      {
        filename ? (
          <p class="leading-none">{filename}</p>
        ) : (
          <p class="leading-none">{language}</p>
        )
      }

      {/* Copy button */}
      <Button
        variant="ghost"
        size="icon"
        className="relative size-9 hover:bg-muted/10"
      >
        <CopyIcon class="size-4" />
      </Button>
    </div>

    {/* Code */}
    <Code
      code={code}
      lang={language as any}
      class="text-sm lg:text-base"
      theme="one-dark-pro"
      highlightedLines={highlightedLines}
      transformers={[transformerMetaHighlight()]}
      inline={false}
    />
  </div>

  <style is:global>
    pre:has(code) {
      padding: 1rem 0px;
      overflow-x: auto;
    }

    pre code {
      display: grid;
      counter-reset: step;
      counter-increment: step 0;
    }

    pre code .line {
      padding-inline: 1rem;
    }

    /* Line numbers */
    pre code .line::before {
      content: counter(step);
      counter-increment: step;
      width: 1rem;
      margin-right: 1.25rem;
      display: inline-block;
      text-align: right;
      color: #636d83;
    }

    /* Highlighted lines */
    pre code .line.highlighted {
      background-color: #3d4555;
    }
  </style>

  <script>
    // Handle (each of) the custom block code
    class CustomBlockCode extends HTMLElement {
      constructor() {
        super();

        // Copy code to clipboard
        const copyButton = this.querySelector("button"); // only one button in the block
        copyButton?.addEventListener("click", () => {
          const code = this.querySelector("pre");
          const codeToCopy = code?.textContent ?? "";

          navigator.clipboard.writeText(codeToCopy).then(() => {
            const checkIcon = `
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-check size-4"
            >
              <path d="M20 6 9 17l-5-5"></path>
            </svg>
          `;

            const copyIcon = `
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="lucide lucide-copy size-4"
            >
              <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
              <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
            </svg>
          `;

            // Change the button content to a check icon
            copyButton.innerHTML = checkIcon;

            // Change the button content back to a copy icon after 1.5 second
            setTimeout(() => {
              copyButton.innerHTML = copyIcon;
            }, 1500);
          });
        });
      }
    }

    customElements.define("custom-block-code", CustomBlockCode);
  </script>
</custom-block-code>
