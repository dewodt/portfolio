---
import DetailBack from "@/components/ui/detail/DetailBack.astro";
import DetailImage from "@/components/ui/detail/DetailImage.astro";
import DetailLiDateRange from "@/components/ui/detail/DetailLiDateRange.astro";
import DetailLiDeployment from "@/components/ui/detail/DetailLiDeployment.astro";
import DetailLiRepository from "@/components/ui/detail/DetailLiRepository.astro";
import DetailTitle from "@/components/ui/detail/DetailTitle.astro";
import CustomPortableText from "@/components/ui/portable-text/CustomPortableText.astro";
import LayoutBase from "@/layouts/LayoutBase.astro";
import {
  sanityClient,
  projectDetailQuery,
  allProjectsQuery,
} from "@/lib/query";
import {
  type AllProjectsQueryResult,
  type ProjectDetailQueryResult,
} from "@/types/sanity";

export const getStaticPaths = async () => {
  // Get all projects from CMS
  const allProjectsData =
    await sanityClient.fetch<AllProjectsQueryResult>(allProjectsQuery);

  const paths = allProjectsData.map((project) => ({
    params: {
      slug: project.slug.current,
    },
  }));

  return paths;
};

// Get data from CMS
const projectDetailData = await sanityClient.fetch<ProjectDetailQueryResult>(
  projectDetailQuery,
  { slug: Astro.params.slug },
);

if (!projectDetailData) {
  throw new Error("Data not found");
}
---

<LayoutBase
  title={`${projectDetailData.title} | Dewantoro Triatmojo`}
  description={projectDetailData.description}
>
  <main class="flex flex-auto justify-center px-5 py-12 sm:p-12 lg:p-16">
    <div class="flex w-full max-w-3xl flex-col gap-4 lg:gap-6">
      {/* Back Button */}
      <DetailBack href="/projects" />

      <article class="flex flex-col items-start gap-5 lg:gap-7">
        {/* Header Section */}
        <header class="flex w-full flex-col gap-4 lg:gap-6">
          {/* Title */}
          <DetailTitle>
            {projectDetailData.title}
          </DetailTitle>

          {/* Metadata */}
          <ul class="flex flex-col items-start gap-3 lg:gap-4">
            {/* Date Range */}
            <DetailLiDateRange
              dateRange={projectDetailData.dateRange}
              isEmptyEndDateShowNow={false}
            />

            {/* Repository URLS */}
            {
              projectDetailData.repositoryLinks &&
                projectDetailData.repositoryLinks.map((repository) => (
                  <DetailLiRepository repository={repository} />
                ))
            }

            {/* Deployment URLS */}
            {
              projectDetailData.deploymentLinks &&
                projectDetailData.deploymentLinks.map((deployment) => (
                  <DetailLiDeployment deployment={deployment} />
                ))
            }
          </ul>

          {/* Preview Image (Usually project logo) */}
          <DetailImage
            src={projectDetailData.image.url!}
            alt={projectDetailData.image.alt}
          />
        </header>

        {/* Content Section */}
        <section class="w-full">
          {/* Content */}
          <CustomPortableText value={projectDetailData.content} />
        </section>
      </article>
    </div>
  </main>
</LayoutBase>
